// Code generated by heidou Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"{{ . }}/internal"
	"{{ . }}/internal/handlers"
	"{{ . }}/pkg/app"
	"{{ . }}/pkg/config"
	"{{ . }}/pkg/database"
	"{{ . }}/pkg/log"
	"{{ . }}/pkg/transports/http"
	"{{ . }}/pkg/validator"
	"github.com/google/wire"
)

// Injectors from wire.go:

func CreateApp(cf string) (*app.Application, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := NewLogOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	serverOptions, err := NewServerOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	httpOptions, err := NewHttpOptions(viper)
	if err != nil {
		return nil, err
	}
	handlersOptions, err := NewHandlersOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	databaseOptions, err := NewDatabaseOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	db, err := database.New(databaseOptions)
	if err != nil {
		return nil, err
	}
	validatorValidator := validator.New()
	initHandlers := handlers.CreateGqlHandlers(handlersOptions, logger, db, validatorValidator)
	engine := http.NewRouter(httpOptions, logger, initHandlers)
	httpServer, err := http.New(httpOptions, logger, engine)
	if err != nil {
		return nil, err
	}
	application, err := server.NewServer(serverOptions, logger, httpServer)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(
	NewHttpOptions,
	NewServerOptions,
	NewHandlersOptions,
	NewLogOptions,
	NewDatabaseOptions, log.New, config.New, database.New, validator.New, http.New, http.NewRouter, handlers.CreateGqlHandlers, server.NewServer,
)
