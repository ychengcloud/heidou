// Code generated by heidou , DO NOT EDIT.

//go:generate go run github.com/99designs/gqlgen
package resolvers

import (
	"context"
	"strconv"

	"gorm.io/gorm"

	gql "{{.PkgPath}}/internal/gql/generated"
	"{{.PkgPath}}/pkg/validator"
)

// Resolver is a modifable struct that can be used to pass on properties used
// in the resolvers, such as DB access
type Resolver struct {
	DB *gorm.DB
	V   *validator.Validator
}

func (r *Resolver) Mutation() gql.MutationResolver { return &mutationResolver{r} }
func (r *Resolver) Query() gql.QueryResolver       { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

func condition(ctx context.Context, db *gorm.DB, before *string, after *string, first *int, last *int) (*gorm.DB, error) {
	if before != nil {
		if last != nil {
			db = db.Limit(*last)
		}

		b, err := strconv.ParseInt(*before, 10, 0)
		if err != nil {
			return nil, err
		}
		offset := int(b) - *last
		db = db.Offset(offset)
	}
	if after != nil {
		if first != nil {
			db = db.Limit(*first)
		}

		offset, err := strconv.ParseInt(*after, 10, 0)
		if err != nil {
			return nil, err
		}
		db = db.Offset(int(offset))
	}

	return db, nil
}
