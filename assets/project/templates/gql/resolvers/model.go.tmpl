// Code generated by heidou , DO NOT EDIT.
package resolvers

import (
	"context"
	"errors"
	"fmt"
	{{- if .IsStringsJoin }}
	"strings"
	{{- end}}
	
	"gorm.io/gorm"

	"github.com/h/d/internal/gql/models"
)
{{range .Tables}}
{{- $modelName := .Name}}
{{- $modelNameCamel := .NameCamel}}
{{- $modelLowerName := .NameLowerCamel}}
func (r *queryResolver) {{.NameLowerCamel}}Condition(ctx context.Context, {{- if .Filterable}}filter *models.{{.NameCamel}}FilterInput,{{- end}} {{- if .Sortable}}sortBy *models.{{.NameCamel}}SortingInput,{{- end}} before *string, after *string, first *int, last *int) (*gorm.DB, error) {

	db, err := condition(ctx, r.DB, before, after, first, last)
	if err != nil {
		return nil, err
	}

	{{- if .Sortable}}
	if sortBy != nil {
		db = db.Order(fmt.Sprintf("%s %s", sortBy.Field, sortBy.Direction))
	}
	{{- end}}

	{{- if .Filterable}}
	if filter != nil {
		where, clause := handle{{.NameCamel}}Filter(filter)
		if where != "" && len(clause) > 0 {
			db = db.Where(where, clause...)
		}
	}
	{{- end}}

	return db, nil
}

func (r *queryResolver) {{.NameCamelPlural}}(ctx context.Context, {{- if .Filterable}}filter *models.{{.NameCamel}}FilterInput,{{- end}} {{- if .Sortable}}sortBy *models.{{.NameCamel}}SortingInput,{{- end}} before *string, after *string, first *int, last *int) (*models.{{.NameCamel}}Connection, error) {
	result := &models.{{.NameCamel}}Connection{}

	db, err := r.{{.NameLowerCamel}}Condition(ctx, {{- if .Filterable}}filter,{{- end}} {{- if .Sortable}}sortBy,{{- end}} before, after, first, last)
	if err != nil {
		return nil, err
	}

	objects := make([]*models.{{.NameCamel}}, 0)
	err = db.Model(&models.{{.NameCamel}}{}).
		Find(&objects).Error
	if err != nil {
		return nil, err
	}

	for _, object := range objects {
		edge := &models.{{.NameCamel}}Edge{
			Node: object,
		}
		result.Edges = append(result.Edges, edge)
	}

	return result, nil
}

func (r *queryResolver) {{.NameCamel}}(ctx context.Context, id int) (*models.{{.NameCamel}}, error) {
	result := &models.{{.NameCamel}}{}
	result.{{.PrimaryKeyField.NameCamel}} = id
	err := r.DB.Model(result).First(result).Error
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, nil
		}
		return nil, err
	}

	return result, nil
}

func (r *mutationResolver) {{.NameCamel}}Create(ctx context.Context, input models.{{.NameCamel}}Input) (*models.{{.NameCamel}}Create, error) {
	fmt.Printf("%#v\n", input)
	result := &models.{{.NameCamel}}Create{}

	if err := r.V.Validate.Struct(input); err != nil {
		msg := err.Error()
		field := ""
		code := models.{{.NameCamel}}ErrorCodeInvalid
		e := &models.{{.NameCamel}}Error{
			Code:    code,
			Message: msg,
			Field:   field,
		}
		result.Errors = append(result.Errors, e)
		return result, nil

	}
	{{.NameLowerCamel}} := input.ToORM()

	var err error
	tx := r.DB.Begin()
	defer func() {
		if err != nil {
			tx.Rollback()
		}
	}()

	if err = tx.Create({{.NameLowerCamel}}).Error; err != nil {
		msg := err.Error()
		field := ""
		code := models.{{.NameCamel}}ErrorCodeInvalid
		e := &models.{{.NameCamel}}Error{
			Code:    code,
			Message: msg,
			Field:   field,
		}
		result.Errors = append(result.Errors, e)
		return result, nil
	}
	result.{{.NameCamel}} = {{.NameLowerCamel}}

	fmt.Printf("%#v\n", {{.NameLowerCamel}})
	tx.Commit()
	return result, nil
}

func (r *mutationResolver) {{.NameCamel}}Delete(ctx context.Context, id int) (*models.{{.NameCamel}}Delete, error) {
	result := &models.{{.NameCamel}}Delete{}

	if id == 0 {
		msg := fmt.Errorf("id must be set").Error()
		field := "id"
		code := models.{{.NameCamel}}ErrorCodeInvalid
		e := &models.{{.NameCamel}}Error{
			Code:    code,
			Message: msg,
			Field:   field,
		}
		result.Errors = append(result.Errors, e)
		return result, nil
	}
	{{.NameLowerCamel}} := &models.{{.NameCamel}}{
		{{.PrimaryKeyField.NameCamel}}: id,
	}

	var err error
	tx := r.DB.Begin()
	defer func() {
		if err != nil {
			tx.Rollback()
		}
	}()

	err = tx.Model({{.NameLowerCamel}}).Delete({{.NameLowerCamel}}).Error
	if err != nil {
		msg := err.Error()
		field := ""
		code := models.{{.NameCamel}}ErrorCodeInvalid
		e := &models.{{.NameCamel}}Error{
			Code:    code,
			Message: msg,
			Field:   field,
		}
		result.Errors = append(result.Errors, e)
		return result, nil
	}

	{{- $hasErrorCode := .HasErrorCode}}
	{{- range .Fields}}
	{{- if eq .JoinType "ManyToMany"}}
	err = tx.Model({{$modelLowerName}}).Association("{{.NameCamelPlural}}").Clear()
	if err != nil {
		errCode := models.{{$modelNameCamel}}ErrorCodeInvalid
		msg := err.Error()
		field := ""
		e := &models.{{$modelNameCamel}}Error{
			{{- if $hasErrorCode}}Code:    errCode,{{- end}}
			Message: msg,
			Field:   field,
			Code:    errCode,
		}
		result.Errors = append(result.Errors, e)
		return result, nil
	}
	{{- end}}
	{{- end}}

	result.{{.NameCamel}} = {{.NameLowerCamel}}
	tx.Commit()

	return result, nil
}

func (r *mutationResolver) {{.NameCamel}}BulkDelete(ctx context.Context, ids []*int) (*models.{{.NameCamel}}BulkDelete, error) {
	result := &models.{{.NameCamel}}BulkDelete{}

	for _, id := range ids {
		if *id == 0 {
			msg := fmt.Errorf("id must be set").Error()
			field := "id"
			code := models.{{.NameCamel}}ErrorCodeInvalid
			e := &models.{{.NameCamel}}Error{
				Code:    code,
				Message: msg,
				Field:   field,
			}
			result.Errors = append(result.Errors, e)
			return result, nil
		}
	}

	var err error
	tx := r.DB.Begin()
	defer func() {
		if err != nil {
			tx.Rollback()
		}
	}()

	tx = tx.Model(&models.{{.NameCamel}}{}).Where("id IN ( ? ) ", ids)

	err = tx.Delete(&models.{{.NameCamel}}{}).Error
	if err != nil {
		msg := err.Error()
		field := ""
		code := models.{{.NameCamel}}ErrorCodeInvalid
		e := &models.{{.NameCamel}}Error{
			Code:    code,
			Message: msg,
			Field:   field,
		}
		result.Errors = append(result.Errors, e)
		return result, nil
	}
	result.Count = int(tx.RowsAffected)

	{{.NameLowerCamel}} := &models.{{.NameCamel}}{}

	for _, id := range ids {
		{{.NameLowerCamel}}.{{.PrimaryKeyField.NameCamel}} = *id
		fmt.Printf("%#v\n", {{.NameLowerCamel}})

		{{- $modelNameCamel := .NameCamel}}
		{{- $modelLowerName := .NameLowerCamel}}
		{{- $hasErrorCode := .HasErrorCode}}
		{{- range .Fields}}
		{{- if eq .JoinType "ManyToMany"}}
		err = tx.Model({{$modelLowerName}}).Association("{{.NameCamelPlural}}").Clear()
		if err != nil {
			msg := err.Error()
			field := ""
			code := models.{{$modelNameCamel}}ErrorCodeInvalid
			e := &models.{{$modelNameCamel}}Error{
				Message: msg,
				Field:   field,
				Code:    code,
			}
			result.Errors = append(result.Errors, e)
			return result, nil
		}
		{{- end}}
		{{- end}}
	}

	tx.Commit()

	return result, nil
}

func (r *mutationResolver) {{.NameCamel}}Update(ctx context.Context, id int, input models.{{.NameCamel}}Input) (*models.{{.NameCamel}}Update, error) {
	fmt.Printf("%#v\n", input)
	result := &models.{{.NameCamel}}Update{}

	if id == 0 {
		msg := fmt.Errorf("id must be set").Error()
		field := "id"
		code := models.{{.NameCamel}}ErrorCodeInvalid
		e := &models.{{.NameCamel}}Error{
			Code:    code,
			Message: msg,
			Field:   field,
		}
		result.Errors = append(result.Errors, e)
		return result, nil
	}

	err := r.V.Validate.Struct(input)
	if err != nil {
		msg := err.Error()
		field := ""
		code := models.{{.NameCamel}}ErrorCodeInvalid
		e := &models.{{.NameCamel}}Error{
			Code:    code,
			Message: msg,
			Field:   field,
		}
		result.Errors = append(result.Errors, e)
		return result, nil
	}
	{{.NameLowerCamel}} := input.ToORM()

	tx := r.DB.Begin()
	defer func() {
		if err != nil {
			tx.Rollback()
		}
	}()

	{{.NameLowerCamel}}.{{.PrimaryKeyField.NameCamel}} = id
	err = tx.Model(&models.{{.NameCamel}}{}).Updates({{.NameLowerCamel}}).Error
	if err != nil {
		msg := err.Error()
		field := ""
		code := models.{{.NameCamel}}ErrorCodeInvalid
		e := &models.{{.NameCamel}}Error{
			Code:    code,
			Message: msg,
			Field:   field,
		}
		result.Errors = append(result.Errors, e)
		return result, nil
	}
	result.{{.NameCamel}} = {{.NameLowerCamel}}

	fmt.Printf("%#v\n", {{.NameLowerCamel}})
	tx.Commit()
	return result, nil
}


{{- if .Filterable}}
// 处理  过滤条件
// op 取值 OR, AND, NOT
func handle{{.NameCamel}}Filter(filterInput *models.{{.NameCamel}}FilterInput) (where string, clause []interface{}) {
	if filterInput == nil {
		return
	}
	isFirst := true

	clause = make([]interface{}, 0)
	where = " ( "

	{{- range .Fields}}
	{{- if .IsFilterable }}
	{{$filterName := .NameCamel}}
	{{$filterLowerName := .NameLowerCamel}}
	if filterInput.{{.NameCamel}} != nil {
		if !isFirst {
			where = where + " AND "
		}
		for _, {{$filterLowerName}} := range filterInput.{{$filterName}} {
			{{- range .Operations}}
			if {{$filterLowerName}}.{{.}} != nil {
				{{- if eq . "Eq"}}
				clause = append(clause, *{{$filterLowerName}}.{{.}})
				where = where + "{{$filterLowerName}} = ?"
				{{- end}}
				{{- if eq . "Not"}}
				clause = append(clause, *{{$filterLowerName}}.{{.}})
				where = where + "{{$filterLowerName}} <> ?"
				{{- end}}
				{{- if eq . "In"}}
				v := make([]string, 0, len({{$filterLowerName}}.{{.}}))
				for _, one := range {{$filterLowerName}}.{{.}} {
					clause = append(clause, *one)
					v = append(v, "?")
				}
				where = where + "{{$filterLowerName}} IN (" + strings.Join(v, ",") + ")"
				{{- end}}
				{{- if eq . "Gt"}}
				clause = append(clause, *{{$filterLowerName}}.{{.}})
				where = where + "{{$filterLowerName}} > ?"
				{{- end}}
				{{- if eq . "Gte"}}
				clause = append(clause, *{{$filterLowerName}}.{{.}})
				where = where + "{{$filterLowerName}} >= ?"
				{{- end}}
				{{- if eq . "Lt"}}
				clause = append(clause, *{{$filterLowerName}}.{{.}})
				where = where + "{{$filterLowerName}} < ?"
				{{- end}}
				{{- if eq . "Lte"}}
				clause = append(clause, *{{$filterLowerName}}.{{.}})
				where = where + "{{$filterLowerName}} <= ?"
				{{- end}}
				{{- if eq . "Contains"}}
				clause = append(clause, *{{$filterLowerName}}.{{.}})
				where = where + "{{$filterLowerName}} LIKE (?)"
				{{- end}}
				{{- if eq . "StartsWith"}}
				clause = append(clause, *{{$filterLowerName}}.{{.}})
				where = where + "{{$filterLowerName}} LIKE (?%)"
				{{- end}}
				{{- if eq . "EndsWith"}}
				where = where + "{{$filterLowerName}} LIKE (%?)"
				{{- end}}
			}
			{{- end}}
			isFirst = false

		}
	}
	{{- end}}
	{{- end}}

	if filterInput.OR != nil {
		w, c := handle{{.NameCamel}}Filter(filterInput.OR)
		if w != "" && len(c) > 0 {
			if !isFirst {
				where = where + " OR "
			}
			clause = append(clause, c...)
			where = where + w
			isFirst = false
		}

	}

	if filterInput.AND != nil {
		w, c := handle{{.NameCamel}}Filter(filterInput.AND)
		if w != "" && len(c) > 0 {
			if !isFirst {
				where = where + " AND "
			}
			clause = append(clause, c...)
			where = where + w
			isFirst = false
		}
	}

	if filterInput.NOT != nil {
		w, c := handle{{.NameCamel}}Filter(filterInput.NOT)
		if w != "" && len(c) > 0 {
			if !isFirst {
				where = where + " AND NOT "
			}
			clause = append(clause, c...)
			where = where + w
		}
	}
	where = where + " ) "

	return
}
{{- end}}
{{- end}}