# Code generated by heidou , DO NOT EDIT.

{{$tables := .Tables}}
{{range $tables}}
{{$modelName := .Name}}
{{$modelNameCamel := .NameCamel}}
type {{.NameCamel}} implements Node {
  {{- range .Fields}}
  {{- if eq .JoinType ""}}
  {{.NameLowerCamel}}: {{.MetaType.GqlType}}{{if .IsRequired}}!{{end}}
  {{- end}}
  {{- $associationTable := getModel $tables .TableName}}
  {{- if or (eq .JoinType "BelongTo") (eq .JoinType "HasOne")}}
  {{.NameLowerCamelPlural}}: {{$associationTable.NameCamel}}{{if .IsRequired}}!{{end}}
  {{- end}}
  {{- if or (eq .JoinType "HasMany") (eq .JoinType "ManyToMany")}}
  {{- $associationTable := getModel $tables .TableName}}
  {{.NameLowerCamelPlural}}: [{{$associationTable.NameCamel}}]{{if .IsRequired}}!{{end}}
  {{- end}}
  {{- end}}
}

type {{.NameCamel}}BulkDelete {
  errors: [{{.NameCamel}}Error!]
  count: Int!
}

type {{.NameCamel}}Connection {
  pageInfo: PageInfo!
  edges: [{{.NameCamel}}Edge!]!
  totalCount: Int
}

type {{.NameCamel}}Create {
  errors: [{{.NameCamel}}Error!]
  {{.NameLowerCamel}}: {{.NameCamel}}
}

type {{.NameCamel}}Delete {
  errors: [{{.NameCamel}}Error!]
  {{.NameLowerCamel}}: {{.NameCamel}}
}

type {{.NameCamel}}Edge {
  node: {{.NameCamel}}!
  cursor: String!
}

type {{.NameCamel}}Error {
  field: String
  message: String
  code: {{.NameCamel}}ErrorCode
}

enum {{.NameCamel}}ErrorCode {
  Invalid,
	NotFound,
	AlreadyExists,
  {{- range .ErrorCodes}}
  {{.}}
  {{- end}}
}

{{- if .Filterable}}
input {{.NameCamel}}FilterInput {
  {{- range .Fields}}
    {{- if .IsFilterable }}
  {{.NameLowerCamel}}: [{{$modelNameCamel}}Op{{.NameCamel}}Input!]
    {{- end}}
  {{- end}}
  AND: {{.NameCamel}}FilterInput
  OR: {{.NameCamel}}FilterInput
  NOT: {{.NameCamel}}FilterInput
}

  {{- range .Fields}}
    {{- if .IsFilterable }}
    {{- $t := .MetaType.GqlType }}
input {{$modelNameCamel}}Op{{.NameCamel}}Input {
      {{- range .Operations}}
        {{- if eq . "In" }}
  {{- $t = (printf "[%s]" $t) }}
        {{- end }}
  {{.}}: {{$t}}
      {{- end}}
}
    {{- end}}
  {{- end}}
{{- end}}

input {{.NameCamel}}Input {
{{- range .Fields}}
  {{- if not .IsPrimaryKey}}
    {{- if eq .JoinType ""}}
  {{.NameLowerCamel}}: {{.MetaType.GqlType}}{{if .IsRequired}}!{{end}}
    {{- else}}
      {{- $associationTable := getModel $tables .TableName}}
      {{- if or (eq .JoinType "HasMany") (eq .JoinType "ManyToMany")}}
  {{.NameLowerCamelPlural}}: [{{$associationTable.NameCamel}}Input{{if .IsRequired}}!{{end}}]
      {{- else}}
  {{.NameLowerCamel}}: {{$associationTable.NameCamel}}Input{{if .IsRequired}}!{{end}}
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}
}

{{- if .Sortable}}
enum {{.NameCamel}}SortField {
  {{- range .Fields}}
  {{- if .IsSortable}}
  {{.NameCamel}}
  {{- end}}
  {{- end}}
}

input {{.NameCamel}}SortingInput {
  direction: OrderDirection!
  field: {{.NameCamel}}SortField!
}
{{- end}}

type {{.NameCamel}}Update {
  errors: [{{.NameCamel}}Error!]
  {{.NameLowerCamel}}: {{.NameCamel}}
}
{{end}}