// Code generated by hedone, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type DateRangeInput struct {
	Gte *string `json:"gte"`
	Lte *string `json:"lte"`
}

type DateTimeRangeInput struct {
	Gte *string `json:"gte"`
	Lte *string `json:"lte"`
}

type Error struct {
	Field   *string    `json:"field"`
	Message *string    `json:"message"`
	Code    *ErrorCode `json:"code"`
}

type ExtensionsError struct {
	Field   *string              `json:"field"`
	Message *string              `json:"message"`
	Code    *ExtensionsErrorCode `json:"code"`
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
}

type ErrorCode string

const (
	ErrorCodeGraphqlError        ErrorCode = "GRAPHQL_ERROR"
	ErrorCodeInvalid             ErrorCode = "INVALID"
	ErrorCodePluginMisconfigured ErrorCode = "PLUGIN_MISCONFIGURED"
	ErrorCodeNotFound            ErrorCode = "NOT_FOUND"
	ErrorCodeRequired            ErrorCode = "REQUIRED"
	ErrorCodeUnique              ErrorCode = "UNIQUE"
)

var AllErrorCode = []ErrorCode{
	ErrorCodeGraphqlError,
	ErrorCodeInvalid,
	ErrorCodePluginMisconfigured,
	ErrorCodeNotFound,
	ErrorCodeRequired,
	ErrorCodeUnique,
}

func (e ErrorCode) IsValid() bool {
	switch e {
	case ErrorCodeGraphqlError, ErrorCodeInvalid, ErrorCodePluginMisconfigured, ErrorCodeNotFound, ErrorCodeRequired, ErrorCodeUnique:
		return true
	}
	return false
}

func (e ErrorCode) String() string {
	return string(e)
}

func (e *ErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ErrorCode", str)
	}
	return nil
}

func (e ErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ExtensionsErrorCode string

const (
	ExtensionsErrorCodeGraphqlError        ExtensionsErrorCode = "GRAPHQL_ERROR"
	ExtensionsErrorCodeInvalid             ExtensionsErrorCode = "INVALID"
	ExtensionsErrorCodePluginMisconfigured ExtensionsErrorCode = "PLUGIN_MISCONFIGURED"
	ExtensionsErrorCodeNotFound            ExtensionsErrorCode = "NOT_FOUND"
	ExtensionsErrorCodeRequired            ExtensionsErrorCode = "REQUIRED"
	ExtensionsErrorCodeUnique              ExtensionsErrorCode = "UNIQUE"
)

var AllExtensionsErrorCode = []ExtensionsErrorCode{
	ExtensionsErrorCodeGraphqlError,
	ExtensionsErrorCodeInvalid,
	ExtensionsErrorCodePluginMisconfigured,
	ExtensionsErrorCodeNotFound,
	ExtensionsErrorCodeRequired,
	ExtensionsErrorCodeUnique,
}

func (e ExtensionsErrorCode) IsValid() bool {
	switch e {
	case ExtensionsErrorCodeGraphqlError, ExtensionsErrorCodeInvalid, ExtensionsErrorCodePluginMisconfigured, ExtensionsErrorCodeNotFound, ExtensionsErrorCodeRequired, ExtensionsErrorCodeUnique:
		return true
	}
	return false
}

func (e ExtensionsErrorCode) String() string {
	return string(e)
}

func (e *ExtensionsErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExtensionsErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExtensionsErrorCode", str)
	}
	return nil
}

func (e ExtensionsErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LanguageCodeEnum string

const (
	LanguageCodeEnumAr     LanguageCodeEnum = "AR"
	LanguageCodeEnumAz     LanguageCodeEnum = "AZ"
	LanguageCodeEnumBg     LanguageCodeEnum = "BG"
	LanguageCodeEnumBn     LanguageCodeEnum = "BN"
	LanguageCodeEnumCa     LanguageCodeEnum = "CA"
	LanguageCodeEnumCs     LanguageCodeEnum = "CS"
	LanguageCodeEnumDa     LanguageCodeEnum = "DA"
	LanguageCodeEnumDe     LanguageCodeEnum = "DE"
	LanguageCodeEnumEl     LanguageCodeEnum = "EL"
	LanguageCodeEnumEn     LanguageCodeEnum = "EN"
	LanguageCodeEnumEs     LanguageCodeEnum = "ES"
	LanguageCodeEnumEsCo   LanguageCodeEnum = "ES_CO"
	LanguageCodeEnumEt     LanguageCodeEnum = "ET"
	LanguageCodeEnumFa     LanguageCodeEnum = "FA"
	LanguageCodeEnumFr     LanguageCodeEnum = "FR"
	LanguageCodeEnumHi     LanguageCodeEnum = "HI"
	LanguageCodeEnumHu     LanguageCodeEnum = "HU"
	LanguageCodeEnumHy     LanguageCodeEnum = "HY"
	LanguageCodeEnumID     LanguageCodeEnum = "ID"
	LanguageCodeEnumIs     LanguageCodeEnum = "IS"
	LanguageCodeEnumIt     LanguageCodeEnum = "IT"
	LanguageCodeEnumJa     LanguageCodeEnum = "JA"
	LanguageCodeEnumKo     LanguageCodeEnum = "KO"
	LanguageCodeEnumLt     LanguageCodeEnum = "LT"
	LanguageCodeEnumMn     LanguageCodeEnum = "MN"
	LanguageCodeEnumNb     LanguageCodeEnum = "NB"
	LanguageCodeEnumNl     LanguageCodeEnum = "NL"
	LanguageCodeEnumPl     LanguageCodeEnum = "PL"
	LanguageCodeEnumPt     LanguageCodeEnum = "PT"
	LanguageCodeEnumPtBr   LanguageCodeEnum = "PT_BR"
	LanguageCodeEnumRo     LanguageCodeEnum = "RO"
	LanguageCodeEnumRu     LanguageCodeEnum = "RU"
	LanguageCodeEnumSk     LanguageCodeEnum = "SK"
	LanguageCodeEnumSq     LanguageCodeEnum = "SQ"
	LanguageCodeEnumSr     LanguageCodeEnum = "SR"
	LanguageCodeEnumSw     LanguageCodeEnum = "SW"
	LanguageCodeEnumSv     LanguageCodeEnum = "SV"
	LanguageCodeEnumTh     LanguageCodeEnum = "TH"
	LanguageCodeEnumTr     LanguageCodeEnum = "TR"
	LanguageCodeEnumUk     LanguageCodeEnum = "UK"
	LanguageCodeEnumVi     LanguageCodeEnum = "VI"
	LanguageCodeEnumZhHans LanguageCodeEnum = "ZH_HANS"
	LanguageCodeEnumZhHant LanguageCodeEnum = "ZH_HANT"
)

var AllLanguageCodeEnum = []LanguageCodeEnum{
	LanguageCodeEnumAr,
	LanguageCodeEnumAz,
	LanguageCodeEnumBg,
	LanguageCodeEnumBn,
	LanguageCodeEnumCa,
	LanguageCodeEnumCs,
	LanguageCodeEnumDa,
	LanguageCodeEnumDe,
	LanguageCodeEnumEl,
	LanguageCodeEnumEn,
	LanguageCodeEnumEs,
	LanguageCodeEnumEsCo,
	LanguageCodeEnumEt,
	LanguageCodeEnumFa,
	LanguageCodeEnumFr,
	LanguageCodeEnumHi,
	LanguageCodeEnumHu,
	LanguageCodeEnumHy,
	LanguageCodeEnumID,
	LanguageCodeEnumIs,
	LanguageCodeEnumIt,
	LanguageCodeEnumJa,
	LanguageCodeEnumKo,
	LanguageCodeEnumLt,
	LanguageCodeEnumMn,
	LanguageCodeEnumNb,
	LanguageCodeEnumNl,
	LanguageCodeEnumPl,
	LanguageCodeEnumPt,
	LanguageCodeEnumPtBr,
	LanguageCodeEnumRo,
	LanguageCodeEnumRu,
	LanguageCodeEnumSk,
	LanguageCodeEnumSq,
	LanguageCodeEnumSr,
	LanguageCodeEnumSw,
	LanguageCodeEnumSv,
	LanguageCodeEnumTh,
	LanguageCodeEnumTr,
	LanguageCodeEnumUk,
	LanguageCodeEnumVi,
	LanguageCodeEnumZhHans,
	LanguageCodeEnumZhHant,
}

func (e LanguageCodeEnum) IsValid() bool {
	switch e {
	case LanguageCodeEnumAr, LanguageCodeEnumAz, LanguageCodeEnumBg, LanguageCodeEnumBn, LanguageCodeEnumCa, LanguageCodeEnumCs, LanguageCodeEnumDa, LanguageCodeEnumDe, LanguageCodeEnumEl, LanguageCodeEnumEn, LanguageCodeEnumEs, LanguageCodeEnumEsCo, LanguageCodeEnumEt, LanguageCodeEnumFa, LanguageCodeEnumFr, LanguageCodeEnumHi, LanguageCodeEnumHu, LanguageCodeEnumHy, LanguageCodeEnumID, LanguageCodeEnumIs, LanguageCodeEnumIt, LanguageCodeEnumJa, LanguageCodeEnumKo, LanguageCodeEnumLt, LanguageCodeEnumMn, LanguageCodeEnumNb, LanguageCodeEnumNl, LanguageCodeEnumPl, LanguageCodeEnumPt, LanguageCodeEnumPtBr, LanguageCodeEnumRo, LanguageCodeEnumRu, LanguageCodeEnumSk, LanguageCodeEnumSq, LanguageCodeEnumSr, LanguageCodeEnumSw, LanguageCodeEnumSv, LanguageCodeEnumTh, LanguageCodeEnumTr, LanguageCodeEnumUk, LanguageCodeEnumVi, LanguageCodeEnumZhHans, LanguageCodeEnumZhHant:
		return true
	}
	return false
}

func (e LanguageCodeEnum) String() string {
	return string(e)
}

func (e *LanguageCodeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LanguageCodeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LanguageCodeEnum", str)
	}
	return nil
}

func (e LanguageCodeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
