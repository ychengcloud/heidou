package repositories

import (
	"github.com/pkg/errors"
	"go.uber.org/zap"
	"gorm.io/gorm"

	"{{.PkgPath}}/internal/gen/models"
)

{{- $primaryKeyField := .PrimaryKeyField}}

type {{.NameCamel}}Repository interface {
	List(q *models.Query) (list []*models.{{.NameCamel}}, total int64, err error)
	Create({{.NameLowerCamel}} *models.{{.NameCamel}}) (err error)
	Get({{$primaryKeyField.NameLowerCamel}} {{$primaryKeyField.MetaType.GoType}}) ({{.NameLowerCamel}} *models.{{.NameCamel}}, err error)
	Update({{.NameLowerCamel}} *models.{{.NameCamel}}) (err error)
	Delete({{$primaryKeyField.NameLowerCamel}} {{$primaryKeyField.MetaType.GoType}}) (err error)
	BulkGet({{$primaryKeyField.NameLowerCamel}}List []{{$primaryKeyField.MetaType.GoType}}) ([]*models.{{.NameCamel}}, error)
	BulkDelete({{$primaryKeyField.NameLowerCamel}}List []{{$primaryKeyField.MetaType.GoType}}) (err error)
}

type Gorm{{.NameCamel}}Repository struct {
	logger *zap.Logger
	db     *gorm.DB
}

func NewGorm{{.NameCamel}}Repository(logger *zap.Logger, db *gorm.DB) {{.NameCamel}}Repository {
	return &Gorm{{.NameCamel}}Repository{
		logger: logger.With(zap.String("type", "{{.NameCamel}}Repository")),
		db:     db,
	}
}

//List ...
func (s *Gorm{{.NameCamel}}Repository) List(q *models.Query) (list []*models.{{.NameCamel}}, total int64, err error) {
	{{.NameCamel}} := &models.{{.NameCamel}}{}

	db := Query(s.db, {{.NameCamel}}, q)
	if err = db.Count(&total).Error; err != nil {
		return
	}

	list = make([]*models.{{.NameCamel}}, 0)
	err = db.Find(&list).Error
	return list, total, err
}

func (s *Gorm{{.NameCamel}}Repository) Create({{.NameLowerCamel}} *models.{{.NameCamel}}) (err error) {
	tx := s.db.Begin()
	defer func() {
		if err != nil {
			tx.Rollback()
		}
	}()

	err = tx.Create({{.NameLowerCamel}}).Error
	if err != nil {
		return
	}

	{{- $handlerName := .NameLowerCamel}}
	{{- range .Fields}}
	{{- if or (eq .JoinType "ManyToMany") (eq .JoinType "HasMany") }}
    {{.NameLowerCamelPlural}} := make([]*models.{{.MetaType.GoType}}, 0, len({{$handlerName}}.{{.NameCamelPlural}}))
	for _, m := range {{$handlerName}}.{{.NameCamelPlural}} {
		{{.NameLowerCamel}} := &models.{{.MetaType.GoType}}{}
		err = tx.Where(&m).First({{.NameLowerCamel}}).Error
		if err != nil {
			tx.Rollback()
			return err
		}
		if err = tx.Model({{$handlerName}}).Association("{{.NameCamelPlural}}").Append({{.NameLowerCamel}}).Error; err != nil {
			tx.Rollback()
			return err
		}
		{{.NameLowerCamelPlural}} = append({{.NameLowerCamelPlural}}, {{.NameLowerCamel}})
	}
	{{$handlerName}}.{{.NameCamelPlural}} = {{.NameLowerCamelPlural}}
	{{- end}}
    {{- end}}

	tx.Commit()
	return
}

func (s *Gorm{{.NameCamel}}Repository) Get({{$primaryKeyField.NameLowerCamel}} {{$primaryKeyField.MetaType.GoType}}) ({{.NameLowerCamel}} *models.{{.NameCamel}}, err error) {
	{{.NameLowerCamel}} = &models.{{.NameCamel}}{}

    db := s.db.Model({{.NameLowerCamel}})
	{{- range .Fields}}
	{{- if not (eq .JoinType "") }}
    db = db.Preload("{{.NameCamelPlural}}")
    {{- end}}
    {{- end}}
	if err = db.Where("{{$primaryKeyField.NameLowerCamel}} = ?", {{$primaryKeyField.NameLowerCamel}}).First({{.NameLowerCamel}}).Error; err != nil {
		return nil, errors.Wrapf(err, "get {{.NameCamel}} error[id=%d]", {{$primaryKeyField.NameLowerCamel}})
	}
	return
}

func (s *Gorm{{.NameCamel}}Repository) Update({{.NameLowerCamel}} *models.{{.NameCamel}}) (err error) {
	tx := s.db.Begin()
	defer func() {
		if err != nil {
			tx.Rollback()
		}
	}()

	err = tx.Model({{.NameLowerCamel}}).Updates({{.NameLowerCamel}}).Error
	if err != nil {
		return
	}

	{{- $handlerName := .NameLowerCamel}}
	{{- range .Fields}}
	{{- if or (eq .JoinType "ManyToMany") (eq .JoinType "HasMany") }}
    {{.NameLowerCamelPlural}} := make([]*models.{{.NameCamel}}, 0, len({{$handlerName}}.{{.NameCamelPlural}}))
	for _, m := range {{$handlerName}}.{{.NameCamelPlural}} {
		{{.NameLowerCamel}} := &models.{{.NameCamel}}{}
		err = tx.Where(&m).First({{.NameLowerCamel}}).Error
		if err != nil {
			tx.Rollback()
			return err
		}
		if err = tx.Model({{$handlerName}}).Association("{{.NameCamelPlural}}").Replace({{.NameLowerCamel}}).Error; err != nil {
			tx.Rollback()
			return err
		}
		{{.NameLowerCamelPlural}} = append({{.NameLowerCamelPlural}}, {{.NameLowerCamel}})
	}
	{{$handlerName}}.{{.NameCamelPlural}} = {{.NameLowerCamelPlural}}
    {{- end}}
    {{- end}}

	tx.Commit()
	return
}

func (s *Gorm{{.NameCamel}}Repository) Delete({{$primaryKeyField.NameLowerCamel}} {{$primaryKeyField.MetaType.GoType}}) (err error) {
	tx := s.db.Begin()
	defer func() {
		if err != nil {
			tx.Rollback()
		}
	}()

	if {{$primaryKeyField.NameLowerCamel}} == 0 {
		return models.ErrBadParamInput
	}

	{{.NameLowerCamel}} := &models.{{.NameCamel}}{ {{$primaryKeyField.NameCamel}}: {{$primaryKeyField.NameLowerCamel}} }
	if err = tx.Delete({{.NameLowerCamel}}).Error; err != nil {
		return errors.Wrapf(err, "delete {{.NameCamel}} error[id=%d]", {{$primaryKeyField.NameLowerCamel}})
	}

	tx.Commit()
	return
}

func (s *Gorm{{.NameCamel}}Repository) BulkGet({{$primaryKeyField.NameLowerCamel}}List []{{$primaryKeyField.MetaType.GoType}}) (list []*models.{{.NameCamel}}, err error) {
	list = make([]*models.{{.NameCamel}}, 0, len({{$primaryKeyField.NameLowerCamel}}List))

	db := s.db.Model(&models.{{.NameCamel}}{})
	if err = db.Where("id IN (?)", {{$primaryKeyField.NameLowerCamel}}List).Find(&list).Error; err != nil {
		return nil, errors.Wrapf(err, "get {{.NameCamel}} error[id=%d]", len({{$primaryKeyField.NameLowerCamel}}List))
	}
	return
}

func (s *Gorm{{.NameCamel}}Repository) BulkDelete({{$primaryKeyField.NameLowerCamel}}List []{{$primaryKeyField.MetaType.GoType}}) (err error) {
	tx := s.db.Begin()
	defer func() {
		if err != nil {
			tx.Rollback()
		}
	}()

	for _, {{$primaryKeyField.NameLowerCamel}} := range {{$primaryKeyField.NameLowerCamel}}List {
		if {{$primaryKeyField.NameLowerCamel}} == 0 {
			return models.ErrBadParamInput
		}
	}

	if err = tx.Where("id IN (?)", {{$primaryKeyField.NameLowerCamel}}List).Delete(&models.{{.NameCamel}}{}).Error; err != nil {
		return errors.Wrapf(err, "batch delete {{.NameCamel}} error[len=%d]", len({{$primaryKeyField.NameLowerCamel}}List))
	}
	tx.Commit()
	return
}
