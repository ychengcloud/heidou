openapi: 3.0.0
info:
  description: "RESTful APIs"
  version: "1.0.0"
  title: "RESTful APIs Application"

servers:
  - url: "http://127.0.0.1:7779/api/v1"

security:
  - bearerAuth: []     

paths:
  {{range .Tables}}
  /{{.NameLowerCamelPlural}}:
    get:
      security:
        - bearerAuth: []
      tags:
      - "{{.NameLowerCamelPlural}}"
      summary: "get all {{.NameLowerCamelPlural}} by pagination"
      description: ""
      parameters:
      - name: "where"
        in: "query"
        description: "column:value will use sql LIKE for search eg:id:67 will where id >67 eg2: name:eric => where name LIKE '%eric%'"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      - name: "fields"
        in: "query"
        description: "{$tableColumn},{$tableColumn}... "
        required: false
        schema:
          type: "string"
      - name: "order"
        in: "query"
        description: "eg: id desc, name desc"
        required: false
        schema:
          type: "string"
      - name: "offset"
        in: "query"
        description: "sql offset eg: 10"
        required: false
        schema:
          type: "integer"
      - name: "limit"
        in: "query"
        description: "limit returning object count"
        required: false
        schema:
          type: "integer"
          default: "2"

      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/{{.NameCamel}}Pagination"
    post:
      tags:
      - "{{.NameLowerCamelPlural}}"
      summary: "create {{.NameLowerCamelPlural}}"
      description: "create {{.NameLowerCamelPlural}}"
      requestBody:
        description: "create {{.NameLowerCamelPlural}}"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/{{.NameCamel}}"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

    patch:
      tags:
      - "{{.NameLowerCamelPlural}}"
      summary: "update {{.NameLowerCamelPlural}}"
      description: "update {{.NameLowerCamelPlural}}"
      requestBody:
        description: "create {{.NameLowerCamelPlural}}"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/{{.NameCamel}}"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /{{.NameLowerCamelPlural}}/{ID}:
    get:
      tags:
      - "{{.NameLowerCamelPlural}}"
      summary: "get a {{.NameLowerCamelPlural}} by ID"
      description: "get a {{.NameLowerCamelPlural}} by ID"
      parameters:
      - name: "ID"
        in: "path"
        description: "ID of {{.NameLowerCamelPlural}} to return"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:          
              schema:
                $ref: "#/components/schemas/{{.NameCamel}}"
    delete:
      tags:
      - "{{.NameLowerCamelPlural}}"
      summary: "Destroy a {{.NameLowerCamelPlural}} by ID"
      description: "delete a {{.NameLowerCamelPlural}} by ID"
      parameters:
      - name: "ID"
        in: "path"
        description: "ID of {{.NameLowerCamelPlural}} to delete"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:          
              schema:
                $ref: "#/components/schemas/ApiResponse"
  {{end}}


components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

  schemas:    
  {{range $table := .Tables}}
    {{$table.NameCamel}}:
      type: "object"
      properties:
      {{range $row := $table.Fields}}
      {{- if or (eq $row.JoinType "HasMany") (eq $row.JoinType "ManyToMany") }}
        {{$row.NameLowerCamelPlural}}:
          type: "array"
          description: "{{$row.Description}}"
          items:
            type: "{{$row.MetaType.SwaggerType}}"    
            $ref: "#/components/schemas/{{.JoinTable.NameCamel}}"
      {{- else}}
        {{$row.NameLowerCamel}}:
          type: "{{$row.MetaType.SwaggerType}}"
          description: "{{$row.Description}}"
          format: "{{$row.MetaType.GoType}}"
      {{- end}}
  {{end}}
    {{$table.NameCamel}}Pagination:
      type: "object"
      properties:
        code:
          type: "integer"
          description: "json repose code"
          format: "int32"
        total:
          type: "integer"
          description: "total numbers"
          format: "int32"
        offset:
          type: "integer"
          description: "offset"
          format: "int32"
        limit:
          type: "integer"
          description: "limit"
          format: "int32"
        list:
          type: "array"
          items:
            $ref: "#/components/schemas/{{$table.NameCamel}}"
{{end}}
    ApiResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        msg:
          type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"