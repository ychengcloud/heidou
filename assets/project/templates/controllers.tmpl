package controllers

import (
	"strconv"

	"github.com/gin-gonic/gin"
	"go.uber.org/zap"

	"{{.AppPkg}}/gen/models"
	"{{.AppPkg}}/gen/services"
)

{{- $primaryKeyColumnName := .PrimaryKeyColumnName}}
{{- $primaryKeyLowerColumnName := .PrimaryKeyLowerColumnName}}
{{- $primaryKeyColumnType := .PrimaryKeyColumnType}}

type {{.ModelName}}BatchRequest struct {
	Method string _[BACKQUOTE]_form:"method" json:"method"_[BACKQUOTE]_
	{{$primaryKeyColumnName}}List []{{$primaryKeyColumnType}}  _[BACKQUOTE]_form:"{{$primaryKeyLowerColumnName}}List" json:"{{$primaryKeyLowerColumnName}}List"_[BACKQUOTE]_

} 
type {{.ModelName}}Controller struct {
    *Controller
	service services.{{.ModelName}}Service
}

func New{{.ModelName}}Controller(logger *zap.Logger, s services.{{.ModelName}}Service) *{{.ModelName}}Controller {
	return &{{.ModelName}}Controller{
		Controller: &Controller{Logger:  logger},
		service: s,
	}
}

// List ...
func ({{.HandlerName}}Controller *{{.ModelName}}Controller) List(c *gin.Context) {

	query := &models.PaginationQuery{}
	err := c.ShouldBindQuery(query)
	if HandleError(c, err) {
		return
	}

	list, total, err := {{.HandlerName}}Controller.service.List(c.Request.Context(), query)
	
	if HandleError(c, err) {
		{{.HandlerName}}Controller.Logger.Error("List {{.HandlerName}} error", zap.Error(err))
		return
	}

	JsonPagination(c, list, total, query)
}

func ({{.HandlerName}}Controller *{{.ModelName}}Controller) Create(c *gin.Context) {
	{{.HandlerName}} := &models.{{.ModelName}}{}
	err := c.ShouldBind({{.HandlerName}})
	if HandleError(c, err) {
		return
	}

	err = {{.HandlerName}}Controller.service.Create(c.Request.Context(), {{.HandlerName}})
	if HandleError(c, err) {
		{{.HandlerName}}Controller.Logger.Error("Create {{.HandlerName}} error", zap.Error(err))
		return
	}

	JsonData(c, {{.HandlerName}})
}

func ({{.HandlerName}}Controller *{{.ModelName}}Controller) Get(c *gin.Context) {
	{{$primaryKeyLowerColumnName}}, err := strconv.ParseUint(c.Param("{{$primaryKeyLowerColumnName}}"), 10, 64)
	if HandleError(c, err) {
		return
	}

	{{.HandlerName}}, err := {{.HandlerName}}Controller.service.Get(c.Request.Context(), {{$primaryKeyColumnType}}({{$primaryKeyLowerColumnName}}))
	if HandleError(c, err) {
		{{.HandlerName}}Controller.Logger.Error("Get {{.HandlerName}} error", zap.Error(err))
		return
	}

	JsonData(c, {{.HandlerName}})
}

func ({{.HandlerName}}Controller *{{.ModelName}}Controller) Update(c *gin.Context) {
	{{.HandlerName}} := &models.{{.ModelName}}{}
	err := c.ShouldBind({{.HandlerName}})
	if HandleError(c, err) {
		return
	}

	err = {{.HandlerName}}Controller.service.Update(c.Request.Context(), {{.HandlerName}})
	if HandleError(c, err) {
		{{.HandlerName}}Controller.Logger.Error("Update {{.HandlerName}} error", zap.Error(err))
		return
	}

	JsonData(c, nil)
}

func ({{.HandlerName}}Controller *{{.ModelName}}Controller) Delete(c *gin.Context) {
	{{$primaryKeyLowerColumnName}}, err := strconv.ParseUint(c.Param("{{$primaryKeyLowerColumnName}}"), 10, 64)
	if HandleError(c, err) {
		return
	}

	err = {{.HandlerName}}Controller.service.Delete(c.Request.Context(), {{$primaryKeyColumnType}}({{$primaryKeyLowerColumnName}}))
	if HandleError(c, err) {
		{{.HandlerName}}Controller.Logger.Error("Delete {{.HandlerName}} error", zap.Error(err))
		return
	}

	JsonData(c, nil)
}

func ({{.HandlerName}}Controller *{{.ModelName}}Controller) BatchGet(c *gin.Context) {
	batchRequest := &{{.ModelName}}BatchRequest{}
	err := c.ShouldBind(batchRequest)
	if HandleError(c, err) {
		return
	}

	{{.HandlerName}}List, err := {{.HandlerName}}Controller.service.BatchGet(c.Request.Context(), batchRequest.{{$primaryKeyColumnName}}List)
	if HandleError(c, err) {
		{{.HandlerName}}Controller.Logger.Error("BatchGet {{.HandlerName}} error", zap.Error(err))
		return
	}
	JsonData(c, {{.HandlerName}}List)
}

func ({{.HandlerName}}Controller *{{.ModelName}}Controller) BatchDelete(c *gin.Context) {
	batchRequest := &{{.ModelName}}BatchRequest{}
	err := c.ShouldBind(batchRequest)
	if HandleError(c, err) {
		return
	}

	err = {{.HandlerName}}Controller.service.BatchDelete(c.Request.Context(), batchRequest.{{$primaryKeyColumnName}}List)
	if HandleError(c, err) {
		{{.HandlerName}}Controller.Logger.Error("BatchDelete {{.HandlerName}} error", zap.Error(err))
		return
	}

	JsonData(c, nil)
}
