package controllers

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/spf13/viper"
	"go.uber.org/zap"

	"{{.}}/internal"
	"{{.}}/internal/gen/models"
	"{{.}}/pkg/transports/http"
	"{{.}}/pkg/transports/http/middlewares/jwt"
)

type Controller struct {
	Logger    *zap.Logger
	ClaimsKey string
}

func NewController(v *viper.Viper, logger *zap.Logger) *Controller {
	claimsKey := v.GetString("jwt.ClaimsKey")

	return &Controller{
		Logger:    logger,
		ClaimsKey: claimsKey,
	}

}

func JsonError(c *gin.Context, code int, msg string) {
	c.AbortWithStatusJSON(200, gin.H{internal.RetCode: code, internal.RetMsg: msg})
}

func JsonData(c *gin.Context, data interface{}) {
    if data == nil {
	    c.JSON(200, gin.H{internal.RetCode: internal.RetCodeOK, internal.RetMsg: "success"})
    } else {
    	c.JSON(200, gin.H{internal.RetCode: internal.RetCodeOK, "data": data})
    }
}
func JsonPagination(c *gin.Context, list interface{}, total uint, query *models.PaginationQuery) {
	data := map[string]interface{}{
		"list":   list,
		"total":  total,
		"offset": query.Offset,
		"limit":  query.Limit,
	}
	c.JSON(200, gin.H{internal.RetCode: internal.RetCodeOK, "data": data})
}

func HandleError(c *gin.Context, err error) bool {
	if err != nil {
		JsonError(c, internal.GetStatusCode(err), err.Error())
		return true
	}
	return false
}

func CreateInitControllersFn(
	logger *zap.Logger,
	auth *auth.JWTAuth,
    {{- range .Tables}}
    {{.NameLowerCamel}} *{{.NameCamel}}Controller,
    {{- end}}
) http.BaseInitControllers {
	return func(r *gin.Engine) {
		apiv1 := r.Group("/api/v1")
		apiv1.Use(jwt.Middleware())
		{
            {{- range $table := .Tables}}
			{{- range .Methods}}
			{{- if eq . "list" }}
            apiv1.GET("/{{$table.NameSnakePlural}}", {{$table.NameLowerCamel}}.List)
			{{- end }}
			{{- if eq . "create" }}
            apiv1.POST("/{{$table.NameSnake}}", {{$table.NameLowerCamel}}.Create)
			{{- end }}
			{{- if eq . "get" }}
            apiv1.GET("/{{$table.NameSnake}}/:id", {{$table.NameLowerCamel}}.Get)
			{{- end }}
			{{- if eq . "update" }}
            apiv1.PATCH("/{{$table.NameSnake}}", {{$table.NameLowerCamel}}.Update)
			{{- end }}
			{{- if eq . "delete" }}
            apiv1.DELETE("/{{$table.NameSnake}}/:id", {{$table.NameLowerCamel}}.Delete)
			{{- end }}
			{{- if eq . "bulkGet" }}
            apiv1.POST("/{{$table.NameSnakePlural}}/bulkGet", {{$table.NameLowerCamel}}.BatchGet)
			{{- end }}
			{{- if eq . "bulkDelete" }}
            apiv1.POST("/{{$table.NameSnakePlural}}/bulkDelete", {{$table.NameLowerCamel}}.BatchDelete)
			{{- end }}
			{{- end }}
            {{- end }}
		}
	}
}

var BaseProviderSet = wire.NewSet(
	NewController,
    {{- range .Tables}}
    New{{.NameCamel}}Controller,
    {{- end}}
    CreateInitControllersFn,
)
