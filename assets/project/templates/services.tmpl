package services

import (
	"context"

	"go.uber.org/zap"

    "{{.PkgPath}}/internal/gen/repositories"
	"{{.PkgPath}}/internal/gen/models"
)

{{- $primaryKeyField := .PrimaryKeyField}}

type {{.NameCamel}}Service interface {
	List(c context.Context, q *models.Query) (list []*models.{{.NameCamel}}, total uint, err error)
	Create(c context.Context, {{.NameLowerCamel}} *models.{{.NameCamel}}) error
	Get(c context.Context, {{$primaryKeyField.NameLowerCamel}} {{$primaryKeyField.MetaType.GoType}}) (*models.{{.NameCamel}}, error)
	Update(c context.Context, {{.NameLowerCamel}} *models.{{.NameCamel}}) error
	Delete(c context.Context, {{$primaryKeyField.NameLowerCamel}} {{$primaryKeyField.MetaType.GoType}}) error
	BulkGet(c context.Context, {{$primaryKeyField.NameLowerCamel}}List []{{$primaryKeyField.MetaType.GoType}}) ([]*models.{{.NameCamel}}, error)
	BulkDelete(c context.Context, {{$primaryKeyField.NameLowerCamel}}List []{{$primaryKeyField.MetaType.GoType}}) error
}

type Default{{.NameCamel}}Service struct {
	logger     *zap.Logger
	Repository repositories.{{.NameCamel}}Repository
}

func New{{.NameCamel}}Service(logger *zap.Logger, r repositories.{{.NameCamel}}Repository) {{.NameCamel}}Service {
	return &Default{{.NameCamel}}Service{
		logger:     logger.With(zap.String("type", "Default{{.NameCamel}}sService")),
		Repository: r,
	}
}

func (s *Default{{.NameCamel}}Service) List(c context.Context, q *models.Query) (list []*models.{{.NameCamel}}, total uint, err error) {

	return s.Repository.List(q)
}

func (s *Default{{.NameCamel}}Service) Create(c context.Context, {{.NameLowerCamel}} *models.{{.NameCamel}}) error {

	return s.Repository.Create({{.NameLowerCamel}})
}

func (s *Default{{.NameCamel}}Service) Get(c context.Context, {{$primaryKeyField.NameLowerCamel}} {{$primaryKeyField.MetaType.GoType}}) ({{.NameLowerCamel}} *models.{{.NameCamel}}, err error) {

	return s.Repository.Get({{$primaryKeyField.NameLowerCamel}})
}


func (s *Default{{.NameCamel}}Service) Update(c context.Context, {{.NameLowerCamel}} *models.{{.NameCamel}}) error {
	if({{.NameLowerCamel}}.{{$primaryKeyField.NameLowerCamel}} == 0) {
		return models.ErrBadParamInput
	}
	return s.Repository.Update({{.NameLowerCamel}})
}

func (s *Default{{.NameCamel}}Service) Delete(c context.Context, {{$primaryKeyField.NameLowerCamel}} {{$primaryKeyField.MetaType.GoType}}) (err error) {
	if({{$primaryKeyField.NameLowerCamel}} == 0) {
		return models.ErrBadParamInput
	}
	return s.Repository.Delete({{$primaryKeyField.NameLowerCamel}})
}

func (s *Default{{.NameCamel}}Service) BulkGet(c context.Context, {{$primaryKeyField.NameLowerCamel}}List []{{$primaryKeyField.MetaType.GoType}}) ([]*models.{{.NameCamel}}, error) {

	return s.Repository.BulkGet({{$primaryKeyField.NameLowerCamel}}List)
}

func (s *Default{{.NameCamel}}Service) BulkDelete(c context.Context, {{$primaryKeyField.NameLowerCamel}}List []{{$primaryKeyField.MetaType.GoType}}) error {
	for _, {{$primaryKeyField.NameLowerCamel}} := range {{$primaryKeyField.NameLowerCamel}}List {
		if({{$primaryKeyField.NameLowerCamel}} == 0) {
			return models.ErrBadParamInput
		}
	}
	return s.Repository.BulkDelete({{$primaryKeyField.NameLowerCamel}}List)
}