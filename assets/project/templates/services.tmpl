package services

import (
	"context"

	"go.uber.org/zap"

    "{{.AppPkg}}/gen/repositories"
	"{{.AppPkg}}/gen/models"
)

{{- $primaryKeyColumnName := .PrimaryKeyColumnName}}
{{- $primaryKeyColumnType := .PrimaryKeyColumnType}}
{{- $primaryKeyLowerColumnName := .PrimaryKeyLowerColumnName}}
type {{.ModelName}}Service interface {
	List(c context.Context, q *models.PaginationQuery) (list []*models.{{.ModelName}}, total uint, err error)
	Create(c context.Context, {{.HandlerName}} *models.{{.ModelName}}) error
	Get(c context.Context, {{$primaryKeyColumnName}} {{$primaryKeyColumnType}}) (*models.{{.ModelName}}, error)
	Update(c context.Context, {{.HandlerName}} *models.{{.ModelName}}) error
	Delete(c context.Context, {{$primaryKeyColumnName}} {{$primaryKeyColumnType}}) error
	BatchGet(c context.Context, {{$primaryKeyLowerColumnName}}List []{{$primaryKeyColumnType}}) ([]*models.{{.ModelName}}, error)
	BatchDelete(c context.Context, {{$primaryKeyLowerColumnName}}List []{{$primaryKeyColumnType}}) error
}

type Default{{.ModelName}}Service struct {
	logger     *zap.Logger
	Repository repositories.{{.ModelName}}Repository
}

func New{{.ModelName}}Service(logger *zap.Logger, r repositories.{{.ModelName}}Repository) {{.ModelName}}Service {
	return &Default{{.ModelName}}Service{
		logger:     logger.With(zap.String("type", "Default{{.ModelName}}sService")),
		Repository: r,
	}
}

func (s *Default{{.ModelName}}Service) List(c context.Context, q *models.PaginationQuery) (list []*models.{{.ModelName}}, total uint, err error) {

	return s.Repository.List(q)
}

func (s *Default{{.ModelName}}Service) Create(c context.Context, {{.HandlerName}} *models.{{.ModelName}}) error {

	return s.Repository.Create({{.HandlerName}})
}

func (s *Default{{.ModelName}}Service) Get(c context.Context, {{$primaryKeyColumnName}} {{$primaryKeyColumnType}}) ({{.HandlerName}} *models.{{.ModelName}}, err error) {

	return s.Repository.Get({{$primaryKeyColumnName}})
}


func (s *Default{{.ModelName}}Service) Update(c context.Context, {{.HandlerName}} *models.{{.ModelName}}) error {
	if({{.HandlerName}}.{{$primaryKeyColumnName}} == 0) {
		return models.ErrBadParamInput
	}
	return s.Repository.Update({{.HandlerName}})
}

func (s *Default{{.ModelName}}Service) Delete(c context.Context, {{$primaryKeyColumnName}} {{$primaryKeyColumnType}}) (err error) {
	if({{$primaryKeyColumnName}} == 0) {
		return models.ErrBadParamInput
	}
	return s.Repository.Delete({{$primaryKeyColumnName}})
}

func (s *Default{{.ModelName}}Service) BatchGet(c context.Context, {{$primaryKeyLowerColumnName}}List []{{$primaryKeyColumnType}}) ([]*models.{{.ModelName}}, error) {

	return s.Repository.BatchGet({{$primaryKeyLowerColumnName}}List)
}

func (s *Default{{.ModelName}}Service) BatchDelete(c context.Context, {{$primaryKeyLowerColumnName}}List []{{$primaryKeyColumnType}}) error {
	for _, {{$primaryKeyColumnName}} := range {{$primaryKeyLowerColumnName}}List {
		if({{$primaryKeyColumnName}} == 0) {
			return models.ErrBadParamInput
		}
	}
	return s.Repository.BatchDelete({{$primaryKeyLowerColumnName}}List)
}