package repositories

import (
	"fmt"
	"strings"

	"github.com/google/wire"
	"github.com/iancoleman/strcase"
	"gorm.io/gorm"

	"{{.PkgPath}}/internal/gen/models"
)

const (
	OpEq    = "eq"
	OpIn    = "in"
	OpNot   = "not"
	OpNotIn = "notin"
	OpGt    = "gt"
	OpGte   = "gte"
	OpLt    = "lt"
	OpLte   = "lte"
	OpLike  = "like"
)

const (
	MaxLimitCount = 1000
)

var BaseProviderSet = wire.NewSet(
    {{- range .Tables}}
    NewGorm{{.NameCamel}}Repository,
    {{- end}}
)

//result 返回为空串，表示不符合任何支持的操作符
func operation(op string) (result string) {
	switch strings.ToLower(op) {
	case OpEq:
		result = "= ?"
	case OpNot:
		result = "!= ?"
	case OpGt:
		result = "> ?"
	case OpGte:
		result = ">= ?"
	case OpLt:
		result = "< ?"
	case OpLte:
		result = "<= ?"
	case OpLike:
		result = "LIKE ?"
	case OpIn:
		result = "IN (?)"
	case OpNotIn:
		result = "NOT IN (?)"
	}
	return
}

func Filter(db *gorm.DB, q *models.Query) *gorm.DB {
	for _, filter := range q.Filter {
		w := strings.SplitN(filter, ":", 3)
		// 不满足条件三元组的格式, eg: id:eq:1
		if len(w) != 3 {
			continue
		}

		name, op, value := w[0], w[1], w[2]
		result := operation(op)
		if len(result) == 0 {
			continue
		}
		field := fmt.Sprintf("`%s` %s", name, result)
		lowerOp := strings.ToLower(op)

		if lowerOp == OpIn || lowerOp == OpNotIn {
			args := strings.Split(value, ",")
			fmt.Println("args:", value, len(args))
			db = db.Where(field, args)
			continue
		}

		args := value
		if lowerOp == OpLike {
			args = fmt.Sprintf("%%%s%%", value)
		}
		db = db.Where(field, args)

	}
	return db
}

func Query(db *gorm.DB, q *models.Query) *gorm.DB {
	if q.Order != "" {
		db = db.Order(q.Order)
	}
	if q.Offset > 0 {
		db = db.Offset(q.Offset)
	}
	if q.Limit > MaxLimitCount {
		q.Limit = MaxLimitCount
	}
	if q.Limit > 0 {
		db = db.Limit(q.Limit)

	}
	return db
}

func Select(db *gorm.DB, fields string) *gorm.DB {
	if fields == "" {
		return db
	}
	columns := strings.Split(fields, ",")
	if len(columns) > 0 {
		db = db.Select(columns)
	}
	return db
}
func Expands(db *gorm.DB, expands string) *gorm.DB {
	if len(expands) == 0 {
		return db
	}

	expandsList := strings.Split(expands, ",")
	for _, expand := range expandsList {
		expandNameList := strings.Split(expand, ".")
		var preloadList []string
		for _, expandName := range expandNameList {
			preloadList = append(preloadList, strcase.ToCamel(expandName))
		}
		preload := strings.Join(preloadList, ".")
		db = db.Preload(preload)
	}

	return db
}
