package controllers

import (
	"strconv"

	"github.com/gin-gonic/gin"
	"go.uber.org/zap"

	"{{ .Extra.pkgpath }}/internal/gen/models"
	"{{ .Extra.pkgpath }}/internal/gen/services"
)

{{- $primaryKeyField := .PrimaryKeyField}}
{{- $receiver := receiver (printf "%sController" .NameCamel)}}

type {{.NameCamel}}BulkRequest struct {
	Method string `form:"method" json:"method"`
	{{$primaryKeyField.NameCamel}}List []{{$primaryKeyField.MetaType.GoType}}  `form:"{{$primaryKeyField.NameLowerCamel}}List" json:"{{$primaryKeyField.NameLowerCamel}}List"`

} 
type {{.NameCamel}}Controller struct {
    *Controller
	service services.{{.NameCamel}}Service
}

func New{{.NameCamel}}Controller(logger *zap.Logger, s services.{{.NameCamel}}Service) *{{.NameCamel}}Controller {
	return &{{.NameCamel}}Controller{
		Controller: &Controller{Logger:  logger},
		service: s,
	}
}

// List ...
func ({{$receiver}} *{{.NameCamel}}Controller) List(c *gin.Context) {

	query := &models.Query{}
	err := c.ShouldBindQuery(query)
	if HandleError(c, err) {
		return
	}

	list, total, err := {{$receiver}}.service.List(c.Request.Context(), query)
	
	if HandleError(c, err) {
		{{$receiver}}.Logger.Error("List {{.NameLowerCamel}} error", zap.Error(err))
		return
	}

	JsonPagination(c, list, total)
}

func ({{$receiver}} *{{.NameCamel}}Controller) Create(c *gin.Context) {
	{{.NameLowerCamel}} := &models.{{.NameCamel}}{}
	err := c.ShouldBind({{.NameLowerCamel}})
	if HandleError(c, err) {
		return
	}

	err = {{$receiver}}.service.Create(c.Request.Context(), {{.NameLowerCamel}})
	if HandleError(c, err) {
		{{$receiver}}.Logger.Error("Create {{.NameLowerCamel}} error", zap.Error(err))
		return
	}

	JsonData(c, {{.NameLowerCamel}})
}

func ({{$receiver}} *{{.NameCamel}}Controller) Get(c *gin.Context) {
	{{$primaryKeyField.NameLowerCamel}}, err := strconv.ParseUint(c.Param("{{$primaryKeyField.NameLowerCamel}}"), 10, 64)
	if HandleError(c, err) {
		return
	}

	{{.NameLowerCamel}}, err := {{$receiver}}.service.Get(c.Request.Context(), {{$primaryKeyField.MetaType.GoType}}({{$primaryKeyField.NameLowerCamel}}))
	if HandleError(c, err) {
		{{$receiver}}.Logger.Error("Get {{.NameLowerCamel}} error", zap.Error(err))
		return
	}

	JsonData(c, {{.NameLowerCamel}})
}

func ({{$receiver}} *{{.NameCamel}}Controller) Update(c *gin.Context) {
	{{.NameLowerCamel}} := &models.{{.NameCamel}}{}
	err := c.ShouldBind({{.NameLowerCamel}})
	if HandleError(c, err) {
		return
	}

	err = {{$receiver}}.service.Update(c.Request.Context(), {{.NameLowerCamel}})
	if HandleError(c, err) {
		{{$receiver}}.Logger.Error("Update {{.NameLowerCamel}} error", zap.Error(err))
		return
	}

	JsonData(c, nil)
}

func ({{$receiver}} *{{.NameCamel}}Controller) Delete(c *gin.Context) {
	{{$primaryKeyField.NameLowerCamel}}, err := strconv.ParseUint(c.Param("{{$primaryKeyField.NameLowerCamel}}"), 10, 64)
	if HandleError(c, err) {
		return
	}

	err = {{$receiver}}.service.Delete(c.Request.Context(), {{$primaryKeyField.MetaType.GoType}}({{$primaryKeyField.NameLowerCamel}}))
	if HandleError(c, err) {
		{{$receiver}}.Logger.Error("Delete {{.NameLowerCamel}} error", zap.Error(err))
		return
	}

	JsonData(c, nil)
}

func ({{$receiver}} *{{.NameCamel}}Controller) BulkGet(c *gin.Context) {
	batchRequest := &{{.NameCamel}}BulkRequest{}
	err := c.ShouldBind(batchRequest)
	if HandleError(c, err) {
		return
	}

	{{.NameLowerCamel}}List, err := {{$receiver}}.service.BulkGet(c.Request.Context(), batchRequest.{{$primaryKeyField.NameCamel}}List)
	if HandleError(c, err) {
		{{$receiver}}.Logger.Error("BulkGet {{.NameLowerCamel}} error", zap.Error(err))
		return
	}
	JsonData(c, {{.NameLowerCamel}}List)
}

func ({{$receiver}} *{{.NameCamel}}Controller) BulkDelete(c *gin.Context) {
	batchRequest := &{{.NameCamel}}BulkRequest{}
	err := c.ShouldBind(batchRequest)
	if HandleError(c, err) {
		return
	}

	err = {{$receiver}}.service.BulkDelete(c.Request.Context(), batchRequest.{{$primaryKeyField.NameCamel}}List)
	if HandleError(c, err) {
		{{$receiver}}.Logger.Error("BulkDelete {{.NameLowerCamel}} error", zap.Error(err))
		return
	}

	JsonData(c, nil)
}
